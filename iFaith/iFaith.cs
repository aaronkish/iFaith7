using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic;
using System.Reflection;
using System.Security.Cryptography;
using System.Globalization;
using System.Drawing;
using System.Net;
using iFaith.RemoteZip;
using iFaith.PlistCS;
using Ionic.Zip;
using System.Threading;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Runtime.InteropServices;

namespace iFaith
{
    public partial class iFaith
    {
        public static string AppleTSSIP = "17.151.36.30";
        public static bool atv2mode = false;
        public static string blob_bat0 = "";
        public static string blob_bat1 = "";
        public static string blob_batf = "";
        public static string blob_chg0 = "";
        public static string blob_chg1 = "";
        public static string blob_dtre = "";
        public static string blob_glyc = "";
        public static string blob_glyp = "";
        public static string blob_ibec = "";
        public static string blob_ibot = "";
        public static string blob_ibss = "";
        public static string blob_illb = "";
        public static string blob_krnl = "";
        public static string blob_logo = "";
        public static string blob_nsrv = "";
        public static string blob_ramd = "";
        public static string blob_recm = "";
        public static bool CancelDownload = false;
        public static string Certificate = "";
        public static string customIPSWfileName = string.Empty;
        public static bool Debug_Mode = false;
        public static bool DFUConnected = false;
        public static string ECID = "";
        public static string fairydust = "iacqua-1.5-941";
        public static bool iBootConnected = false;
        public static object ifaithBlobsAreNotEncrypted = false;
        public static bool iFaithMode = false;
        public static string ipsw = "";
        public static string IPSWBuild = string.Empty;
        public static string IPSWurl = "NO-DL";
        public static string temppath = (Application.StartupPath + "");
        //public static string temppath = (Directory.GetDirectoryRoot(Application.StartupPath) + "");
        public static string iRecovery = ("\"" + temppath + "\\s-irecovery.exe\" ");
        public static string iTunnel = ("\"" + temppath + "\\itunnel.exe\" ");
        public static bool Loaded = false;
        public static bool OhNoesShutDOWN = false;
        public static string Quotation = "\"";
        public static string realiosversion = "";
        public static bool ResetDFUInstructions = false;
        public static string rootfs = "";
        public static string s5l8720x_datacenter_certificate
        public static string s5l8720x_factory_certificate
        public static string s5l8920x_datacenter_certificate
        public static string s5l8920x_factory_certificate
        public static string s5l8922x_datacenter_certificate = "8107000075070000308203F8308202E0A003020102020110300D06092A864886F70D01010505003062310B300906035504061302555331133011060355040A130A4170706C6520496E632E31263024060355040B131D4170706C652043657274696669636174696F6E20417574686F72697479311630140603550403130D4170706C6520526F6F74204341301E170D3037303130353139323135395A170D3232303130353139323135395A307E310B300906035504061302555331133011060355040A130A4170706C6520496E632E31263024060355040B131D4170706C652043657274696669636174696F6E20417574686F7269747931323030060355040313294170706C652053656375726520426F6F742043657274696669636174696F6E20417574686F7269747930820122300D06092A864886F70D01010105000382010F003082010A0282010100FEF2DDDA6539B072E3038481F456C9D1A14ABBC80401F3460D95E137950A6947C6C48C793E475506B20614EB7EA4F523FE423598EF3405CE9AD3AD94D0A20FC2D2B404484C235A5BC70B9D62D3F3E36B10FE970857C612767719B2C6C32C98EDB72987E4DC18B6E5F3BA13FBB2B6B767D9CBDF6FA5933DED7A9367B4FD3416E400AB0BB74E1F5AD603683E72B614303A0C6497A04622791B772C5B2E90E011DC16A3E1C8F784B24FDC4B3A0AD5127EDC113FFA1173651A4970A07E7582B43C2B2F55DF3088B1754D45DC07282D4A3A85FD9F953E22BA9C46F7B7687BB394D5423E05B338F86779488C6C1F8BBEEEED5405D5A30B587D780F24A9A1DC0A74EAF70203010001A3819C308199300E0603551D0F0101FF040403020186300F0603551D130101FF040530030101FF301D0603551D0E04160414493D3653C9D715E186614EACABAB1856635DC3C6301F0603551D230418301680142BD06947947609FEF46B8D2E40A6F7474D7F085E30360603551D1F042F302D302BA029A0278625687474703A2F2F7777772E6170706C652E636F6D2F6170706C6563612F726F6F742E63726C300D06092A864886F70D0101050500038201010034C50CC50E59112FA6C29F3278E7643269DBADC225CAB74783B7923C7153A0B2AD30958050BD6D5F4CDCCE780D4C491050381035BF4581AC66582C2123F8965E80E9D3C64CFD85AE3961F628AA44ED159B3F47C057AC671C8CCDD4938D4FDB6A54A77B425B0F99C6D738AB52A7A1831D853074EA0D1DDA68848FE2847ECBB9416ED59FA842B5FF33B6717FEAA3B9DD4903608576103E8EA8E136E312DD856CED6653B05B489B2F7FF6CA1CF05D982D74ADF04847C5E19A67B2220FB00E02A0E1BA6A62B9B4B571F425E1B3E5A0EDC81A40B5F8311505A45C38234C909D47038080D43290458F0FAF9BFC02EEEDCBE631F69F15E67D2B57430EE20FA1A0AD89DA308203753082025DA003020102020200A7300D06092A864886F70D0101050500307E310B300906035504061302555331133011060355040A130A4170706C6520496E632E31263024060355040B131D4170706C652043657274696669636174696F6E20417574686F7269747931323030060355040313294170706C652053656375726520426F6F742043657274696669636174696F6E20417574686F72697479301E170D3039303332353230353235325A170D3139303332363230353235325A3055310B300906035504061302555331133011060355040A130A4170706C6520496E632E310C300A060355040B1303455453312330210603550403131A4832412D44617277696E2D50726F642D4461746143656E74657230819F300D06092A864886F70D010101050003818D0030818902818100A8693DFAEC019204EC63A6C9EFC7814AA57B9FFBE73B074994D648033947C85D9FB0A7F1D89419021373848D13AACDBA46663A659AB5DA7A5DA4F4CEF0E5D48F299355BFDE234A0EA2DC07F3F5A7AA86766448753F460523B3531C23D36B46403882D65519BDA8B66B36BE68FDC4F19766D48D661EA72E7E27F8A3D8745287750203010001A381A93081A6300B0603551D0F040403020780301D0603551D0E04160414E24E3A0E1B92221F33AC8E11C69851C786ABDFA9301F0603551D23041830168014493D3653C9D715E186614EACABAB1856635DC3C63057060A2A864886F763640601010101FF0446044433676D49440000003000000000000000747265634D4F4453100000000400000001000000444F525010000000040000000100000050494843100000000400000022890000300D06092A864886F70D01010505000382010100BBC2803059355CD4D5D5D4EE987A96F47CCCC77B8E6A7076494B1DC7AE12B90A850516879771ECE0E7F8FE73CD7600FC2D0AF26EE2845695A5D0A672EC006AA9FAEC28C6B4B2EA58734DB80A15FE8A085C82AEF7AEA1185E471DE38DCFFD6762F083277AB919CCE6C3061A1B7B191A1E526E3D19377FE21FDD0C21F0EDB6D74F4AB727F37F5C8FE90C90721241DC25616CAAABDAD48ECE6E3305A488EA5198BDBC1947032DFCFB50EBF65DDD0BB81E0AB17859ADBBCF47CF3D8AE012D1D35CB79984F30695BF235217D1EE525FCC81F3FFE01EE9366B43F8079ECFB358BEB69F21806CC5137AD9A388810176D829AAA9B2CF7FC0AC81E7B6CBC11710B15ADB57";
        public static string s5l8922x_factory_certificate
        public static string s5l8930x_datacenter_certificate
        public static string s5l8930x_factory_certificate = "870700007B070000308203F8308202E0A003020102020110300D06092A864886F70D01010505003062310B300906035504061302555331133011060355040A130A4170706C6520496E632E31263024060355040B131D4170706C652043657274696669636174696F6E20417574686F72697479311630140603550403130D4170706C6520526F6F74204341301E170D3037303130353139323135395A170D3232303130353139323135395A307E310B300906035504061302555331133011060355040A130A4170706C6520496E632E31263024060355040B131D4170706C652043657274696669636174696F6E20417574686F7269747931323030060355040313294170706C652053656375726520426F6F742043657274696669636174696F6E20417574686F7269747930820122300D06092A864886F70D01010105000382010F003082010A0282010100FEF2DDDA6539B072E3038481F456C9D1A14ABBC80401F3460D95E137950A6947C6C48C793E475506B20614EB7EA4F523FE423598EF3405CE9AD3AD94D0A20FC2D2B404484C235A5BC70B9D62D3F3E36B10FE970857C612767719B2C6C32C98EDB72987E4DC18B6E5F3BA13FBB2B6B767D9CBDF6FA5933DED7A9367B4FD3416E400AB0BB74E1F5AD603683E72B614303A0C6497A04622791B772C5B2E90E011DC16A3E1C8F784B24FDC4B3A0AD5127EDC113FFA1173651A4970A07E7582B43C2B2F55DF3088B1754D45DC07282D4A3A85FD9F953E22BA9C46F7B7687BB394D5423E05B338F86779488C6C1F8BBEEEED5405D5A30B587D780F24A9A1DC0A74EAF70203010001A3819C308199300E0603551D0F0101FF040403020186300F0603551D130101FF040530030101FF301D0603551D0E04160414493D3653C9D715E186614EACABAB1856635DC3C6301F0603551D230418301680142BD06947947609FEF46B8D2E40A6F7474D7F085E30360603551D1F042F302D302BA029A0278625687474703A2F2F7777772E6170706C652E636F6D2F6170706C6563612F726F6F742E63726C300D06092A864886F70D0101050500038201010034C50CC50E59112FA6C29F3278E7643269DBADC225CAB74783B7923C7153A0B2AD30958050BD6D5F4CDCCE780D4C491050381035BF4581AC66582C2123F8965E80E9D3C64CFD85AE3961F628AA44ED159B3F47C057AC671C8CCDD4938D4FDB6A54A77B425B0F99C6D738AB52A7A1831D853074EA0D1DDA68848FE2847ECBB9416ED59FA842B5FF33B6717FEAA3B9DD4903608576103E8EA8E136E312DD856CED6653B05B489B2F7FF6CA1CF05D982D74ADF04847C5E19A67B2220FB00E02A0E1BA6A62B9B4B571F425E1B3E5A0EDC81A40B5F8311505A45C38234C909D47038080D43290458F0FAF9BFC02EEEDCBE631F69F15E67D2B57430EE20FA1A0AD89DA3082037B30820263A003020102020200B8300D06092A864886F70D0101050500307E310B300906035504061302555331133011060355040A130A4170706C6520496E632E31263024060355040B131D4170706C652043657274696669636174696F6E20417574686F7269747931323030060355040313294170706C652053656375726520426F6F742043657274696669636174696F6E20417574686F72697479301E170D3039303430313138313035365A170D3139303430323138313035365A305B310B300906035504061302555331133011060355040A130A4170706C6520496E632E310C300A060355040B130345545331293027060355040313204833502D44617277696E2D50726F642D466163746F72792E2E2E2E2E2E2E2E2E30819F300D06092A864886F70D010101050003818D0030818902818100AB39341182D0D6243874BE97F820B6885D23309B723248347EC1DF773A746FC6461BC008386622596D9B69FD537DAE90733FAEF6F001DA52C65199B902DCCED42E761B537143338D793F8AF2318135ACE131E8E11394245C4E9601A5E283EAC634E61274F76ED7A630772DE7CCA1B034AD28FC7013F98A4C91F49E341B670B690203010001A381A93081A6300B0603551D0F040403020780301D0603551D0E04160414BF8074F4135352847355335B7CD95EAFB64094D7301F0603551D23041830168014493D3653C9D715E186614EACABAB1856635DC3C63057060A2A864886F763640601010101FF0446044433676D49440000003000000000000000747265634D4F4453100000000400000001000000444F525010000000040000000100000050494843100000000400000030890000300D06092A864886F70D01010505000382010100397301682D73F7FA878185E18484FFCFBE6671EA0159EF1A67EB069AA83D92BF5A122906AD2FE980387CB90AA1B8528C19DC4BD8AD248F1CD6C6610DCFB088CE76B1991AA24C176EB04354D0278B089F411E90643C934E603EDE2854199B2164E7C9F8DE74B30348D7BB9EE6CEC060CE7D6C9E3CF189EDEEE19B1CC707FD969766E3FD4B3127CD3A4F8DDFF290C1949F0F51A7770B1DD4EC3867930BB9B9CA4D8073D587CF1F01C783AEBF5AF17BD9D3856EA834F213EDF2AA89459DB3EDE3F92F866F94B186522E34D7F3BCFBCACE3E8B310925D5BAB5E8685757DC2B1003A104C093CF5765BC88C609AF94EA4480F61D481356AF2C4E53FB6FF26690557336";
        public static string s5l8940x_datacenter_certificate
        public static string s5l8940x_factory_certificate
        private static byte[] sendPOSTData;
        private static string sendPOSTURL = string.Empty;
        private static string sendPOSTUserAgent = string.Empty;
        public static string StatusLabel = "";        
        public static string theIPSWhash = "null";
        private static string webResponse = string.Empty;
        public static int webTimeOut = 15;
        public static string xml_apticket = "";
        public static string xml_board = "";
        public static string xml_cert = "";
        public static string xml_ecid = "";
        public static string xml_ios = "";
        public static string xml_ipsw_md5 = "";
        public static string xml_md5 = "";
        public static string xml_model = "";
        public static string xml_revision = "";
        public static DFU myDFU;

        public iFaith(DFU vobjDFU=null)
        {
            myDFU = vobjDFU;
        }

        [CompilerGenerated, DebuggerStepThrough]
        private static void SendCallBack(object a0)
        {
            SendActualPOSTRequest();
        }

        public static void Wait_For_DFU()
        {
            modProcessCmd.cmdline = iRecovery + "-dfu";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            modProcessCmd.Delay(2.0);
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }

        [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
        public static extern void Sleep(long dwMilliseconds);

        public static void Hide_Stages()
        {
            /* MyProject.Forms.MDIMain.dfuinstructionstxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.exploittxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.createipswtxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.uploadibectxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.uploadibsstxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.preptxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.dumptxt.ForeColor = Color.DimGray;
             MyProject.Forms.MDIMain.dfuinstructions.Enabled = false;
             MyProject.Forms.MDIMain.exploitbtn.Enabled = false;
             MyProject.Forms.MDIMain.createipsw.Enabled = false;
             MyProject.Forms.MDIMain.uploadibecbtn.Enabled = false;
             MyProject.Forms.MDIMain.uploadibssbtn.Enabled = false;
             MyProject.Forms.MDIMain.Prepbtn.Enabled = false;
             MyProject.Forms.MDIMain.dumpbtn.Enabled = false;
             MyProject.Forms.MDIMain.dumpbtn.Visible = false;
             MyProject.Forms.MDIMain.Prepbtn.Visible = false;
             MyProject.Forms.MDIMain.dfuinstructions.Visible = false;
             MyProject.Forms.MDIMain.exploitbtn.Visible = false;
             MyProject.Forms.MDIMain.uploadibecbtn.Visible = false;
             MyProject.Forms.MDIMain.uploadibssbtn.Visible = false;
             MyProject.Forms.MDIMain.createipsw.Visible = false;
             MyProject.Forms.MDIMain.blue.Visible = false;
             MyProject.Forms.MDIMain.dumptxt.Visible = false;
             MyProject.Forms.MDIMain.preptxt.Visible = false;
             MyProject.Forms.MDIMain.dfuinstructionstxt.Visible = false;
             MyProject.Forms.MDIMain.uploadibectxt.Visible = false;
             MyProject.Forms.MDIMain.uploadibsstxt.Visible = false;
             MyProject.Forms.MDIMain.exploittxt.Visible = false;
             MyProject.Forms.MDIMain.createipswtxt.Visible = false;
             MyProject.Forms.MDIMain.Button1.Visible = false;
             * */
        }

        public static object ByteFlipper(string Bytes)
        {
            int length = Bytes.Length;
            string str = string.Empty;
            while (length != 0)
            {
                str = str + Bytes.Substring(length - 2, 2);
                length -= 2;
            }
            return str;
        }

        public static string ByteArrayToString(byte[] arrInput)
        {
            StringBuilder builder = new StringBuilder(arrInput.Length);
            int num = arrInput.Length - 1;
            for (int i = 0; i <= num; i++)
            {
                builder.Append(arrInput[i].ToString("X2"));
            }
            return builder.ToString();
        }

        

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void KilliTunes()
        {
            Interaction.Shell("cmd /c taskkill /f /t /im iTunes.exe", AppWinStyle.Hide, false, -1);
            Interaction.Shell("cmd /c taskkill /f /t /im iTunesHelper.exe", AppWinStyle.Hide, false, -1);
        }

        public static void iREB()
        {
            KilliTunes();
            /*modProcessCmd.cmdline = iRecovery + "-e";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);*/
            GoGoGadgetiREB();
        }
        
        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void GoGoGadgetiREB()
        {
            if ((((((modProcessCmd.iDevice == "iPhone 3GS") | (modProcessCmd.iDevice == "iPhone 4")) | (modProcessCmd.iDevice == "iPod Touch 3G")) | (modProcessCmd.iDevice == "iPod Touch 4")) | (modProcessCmd.iDevice == "iPad")) | (modProcessCmd.iDevice == "Apple TV 2"))
            {
                run_limera1n();
            }
            else if (modProcessCmd.iDevice == "iPod Touch 2G")
            {
                run_steaks4uce();
            }
            else if (((modProcessCmd.iDevice == "iPhone 3G") | (modProcessCmd.iDevice == "iPhone 2G")) | (modProcessCmd.iDevice == "iPod Touch 1G"))
            {
                myDFU.dfuinstructionstxt.Text = "Downloading Essentials...";
                myDFU.ProgressBar1.Value = 10;
                Application.DoEvents();
                DownloadFromURL("http://appldnld.apple.com.edgesuite.net/content.info.apple.com/iPhone/061-7481.20100202.4orot/iPhone1,1_3.1.3_7E18_Restore.ipsw", "Firmware/dfu/WTF.s5l8900xall.RELEASE.dfu", temppath + @"\WTF.s5l8900xall.RELEASE.dfu");
                while (!modFile.File_Exists(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu"))
                {
                    Application.DoEvents();
                }
                if (modFile.File_Exists(temppath + @"\WTF.s5l8900xall.RELEASE.dfu"))
                {
                    myDFU.dfuinstructionstxt.Text = "Download completed!";
                    GoGoGadgetiREB_s5l8900x_Patcher();
                }
                else
                {
                    myDFU.dfuinstructionstxt.Text = "Download FAILED!";
                }
            }
        }

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void run_limera1n()
        {
            modFile.SaveToDisk("s-irecovery.exe", iFaith.temppath + @"\s-irecovery.exe");
            myDFU.dfuinstructionstxt.Text = "Exploiting with limera1n...";
            myDFU.BackgroundWorker2 = new BackgroundWorker();
            myDFU.BackgroundWorker2.RunWorkerAsync();
            myDFU.ProgressBar1.Visible = true;
            myDFU.ProgressBar1.Style = ProgressBarStyle.Blocks;
            modProcessCmd.cmdline = iRecovery + "-e";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            myDFU.ProgressBar1.Value = 100;
            myDFU.dfuinstructionstxt.Text = "Done! :)";
            //Sleep(10);
            Interaction.MsgBox("Your device is now in a PWNED DFU state (black screen).\r\rYou may now launch iTunes and do SHIFT + Restore\rto restore to Custom Firmware.\r\rNote: If you get Error 2003 in iTunes after Extracting,\rJust unplug/replug it in and do it again.", MsgBoxStyle.Information, null);
            GoGoGadgetCleanup();
        }

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void run_steaks4uce()
        {
            modFile.SaveToDisk("s-irecovery.exe", iFaith.temppath + @"\s-irecovery.exe");
            myDFU.dfuinstructionstxt.Text = "Exploiting with steaks4uce...";
            myDFU.BackgroundWorker2 = new BackgroundWorker();
            myDFU.BackgroundWorker2.RunWorkerAsync();
            myDFU.ProgressBar1.Visible = true;
            myDFU.ProgressBar1.Style = ProgressBarStyle.Blocks;
            modProcessCmd.cmdline = iRecovery + "-e";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            myDFU.ProgressBar1.Value = 100;
            myDFU.dfuinstructionstxt.Text = "Done! :)";
            //Sleep(100L);
            Interaction.MsgBox("Your device is now in a PWNED DFU state (black screen).\r\rYou may now launch iTunes and do SHIFT + Restore\rto restore to Custom Firmware.\r\rNote: If you get Error 2003 in iTunes after Extracting,\rJust unplug/replug it in and do it again.", MsgBoxStyle.Information, null);
            GoGoGadgetCleanup();
        }

        

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void GoGoGadgetiREB_s5l8900x_Patcher()
        {
            myDFU.ProgressBar1.Value = 0x21;
            modFile.SaveToDisk("itunnel.exe", iFaith.temppath + @"\itunnel.exe");
            myDFU.dfuinstructionstxt.Text = "Patching WTF...";
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0x18", "5E");
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0x40", "0E 25 F8 0D DB 9C 42 0F 2D 91 6C E3 67 BD 89 01");
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0x4D97", "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00");
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0x80FC", "00 20");
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0xF13E", "9F");
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0xF388", "55");
            RawPatch(iFaith.temppath + @"\WTF.s5l8900xall.RELEASE.dfu", "0xF48A", "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EC 57 00 20");
            myDFU.ProgressBar1.Value = 0x42;
            myDFU.dfuinstructionstxt.Invoke(new MethodInvoker(Run_s5l8900x));
        }

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void Run_s5l8900x()
        {
            KilliTunes();
            myDFU.ProgressBar1.Value = 0x63;
            myDFU.dfuinstructionstxt.Text = "Uploading WTF...";
            modProcessCmd.cmdline = iTunnel + " -dfufile " + Quotation + temppath + @"\WTF.s5l8900xall.RELEASE.dfu" + Quotation;
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            myDFU.ProgressBar1.Value = 100;
            myDFU.dfuinstructionstxt.Text = "Done! :)";
            Application.DoEvents();
            Interaction.MsgBox("Your device is now in a PWNED DFU state (black screen).\r\rYou may now launch iTunes and do SHIFT + Restore\rto restore to Custom Firmware.\r\rNote: If you get Error 2003 in iTunes after Extracting,\rJust unplug/replug it in and do it again.", MsgBoxStyle.Information, null);
            GoGoGadgetCleanup();
        }

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        public static void GoGoGadgetCleanup()
        {
            //this.PictureBox5.Visible = true;
            //this.PictureBox6.Visible = false;
            //this.Label9.Visible = true;
            //this.Label10.Visible = false;
            myDFU.Label1.Text = "DFU Helper";
            myDFU.dfuinstructionstxt.Visible = false;
            myDFU.ProgressBar1.Visible = false;
            //this.GroupBox1.Visible = true;
            //this.GroupBox2.Visible = true;
            //this.GroupBox3.Visible = true;
            iFaith.DFUConnected = false;
        }

        public static void DumpIt()
        {
            Process process = new Process();
            process.StartInfo.FileName = temppath + @"\s-irecovery.exe";
            process.StartInfo.Arguments = "-ifaith";
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardInput = true;
            process.StartInfo.RedirectStandardError = true;
            DFU objDFU = new DFU(null);
            process.OutputDataReceived += new DataReceivedEventHandler(objDFU.update_1_shsh);
            process.Start();
            StreamWriter standardInput = process.StandardInput;
            process.BeginOutputReadLine();
            while (objDFU.getSHSHBlob() == string.Empty)
            {
                Application.DoEvents();
            }
            modProcessCmd.Delay(1.0);
        }

        public static void getenv(string Variable)
        {
            Run run = new Run();
            run.setEnvBox(string.Empty);
            Process process = new Process();
            process.StartInfo.FileName = temppath + @"\s-irecovery.exe";
            process.StartInfo.Arguments = "-g " + Variable;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardInput = true;
            process.StartInfo.RedirectStandardError = true;
            process.OutputDataReceived += new DataReceivedEventHandler(run.update_1);
            process.Start();
            StreamWriter standardInput = process.StandardInput;
            process.BeginOutputReadLine();
            while (!process.HasExited)
            {
                Application.DoEvents();
            }
            modProcessCmd.Delay(1.0);
        }

        public static void setenv(string Variable, string value)
        {
            modProcessCmd.cmdline = iRecovery + "-c \"setenv " + Variable + " " + value + "\"";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            modProcessCmd.cmdline = iRecovery + "-c \"saveenv\"";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }

        public static void iRecovery_cmd(string CMD)
        {
            modProcessCmd.cmdline = iRecovery + "-c \"" + CMD + "\"";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }

        public static void iRecovery_exploit()
        {
            modProcessCmd.cmdline = iRecovery + "-eif";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }

        public static void iRecovery_file(string File)
        {
            modProcessCmd.cmdline = iRecovery + "-f \"" + File + "\"";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            string strError = "";
            modFile.File_Delete(File, ref strError);
        }

        public static bool IsDigitsOnly(string str)
        {
            string str2 = str;
            int num = 0;
            int length = str2.Length;
            while (num < length)
            {
                char ch = str2[num];
                if ((ch < '0') || (ch > '9'))
                {
                    return false;
                }
                num++;
            }
            return true;
        }

        public static void KilliRecovery()
        {
            foreach (Process process in Process.GetProcessesByName("s-irecovery"))
            {
                process.Kill();
            }
        }

        public static string MakeTSSRequestFromBuildManifest(string filePath, string boardMeh, ref string iosVersion, ref string iosBuild, ref int boardIDmeh, ref int chipIDmeh, ref string productTypemeh)
        {
            RichTextBox box = new RichTextBox();
            box.LoadFile(filePath, RichTextBoxStreamType.PlainText);
            int startPos = 0;
            Definitions.i = 0;
            while (!(box.Lines[Definitions.i].Contains("<key>DeviceClass</key>") & box.Lines[Definitions.i + 1].Contains(boardMeh)))
            {
                Definitions.i++;
                Application.DoEvents();
            }
            while (!(box.Lines[Definitions.i].Contains("RestoreBehavior") & box.Lines[Definitions.i + 1].Contains("Erase")))
            {
                Definitions.i++;
                Application.DoEvents();
            }
            while (!box.Lines[Definitions.i].Contains("ApBoardID"))
            {
                Definitions.i--;
                Application.DoEvents();
            }
            startPos = Definitions.i - 1;
            Definitions.i = startPos;
            while (!box.Lines[Definitions.i].Contains("<key>UniqueBuildID</key>"))
            {
                Definitions.i++;
                Application.DoEvents();
            }
            string str = "\t" + box.Lines[Definitions.i].Replace("\t", "") + "\r\t" + box.Lines[Definitions.i + 1].Replace("\t", "") + "\r\t" + box.Lines[Definitions.i + 2].Replace("\t", "") + "\r\t" + box.Lines[Definitions.i + 3].Replace("\t", "") + "\r";
            Definitions.i = box.Lines.Length - 1;
            while (!box.Lines[Definitions.i].Contains("<key>ProductVersion</key>"))
            {
                Definitions.i--;
                Application.DoEvents();
            }
            iosVersion = box.Lines[Definitions.i + 1].Replace("\t", "").Replace("<string>", "").Replace("</string>", "");
            Definitions.i = box.Lines.Length - 1;
            while (!box.Lines[Definitions.i].Contains("<key>ProductBuildVersion</key>"))
            {
                Definitions.i--;
                Application.DoEvents();
            }
            iosBuild = box.Lines[Definitions.i + 1].Replace("\t", "").Replace("<string>", "").Replace("</string>", "");
            Definitions.i = box.Lines.Length - 1;
            while (!box.Lines[Definitions.i].Contains("<key>SupportedProductTypes</key>"))
            {
                Definitions.i--;
                Application.DoEvents();
            }
            productTypemeh = box.Lines[Definitions.i + 2].Replace("\t", "").Replace("<string>", "").Replace("</string>", "");
            Application.DoEvents();
            RichTextBox box2 = new RichTextBox();
            RichTextBox box3 = box2;
            box3.Text = box3.Text + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
            box3 = box2;
            box3.Text = box3.Text + "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n";
            box3 = box2;
            box3.Text = box3.Text + "<plist version=\"1.0\">\r\n";
            box3 = box2;
            box3.Text = box3.Text + "<dict>\r\n";
            if (Convert.ToInt64(Conversions.ToString((int)chipIDmeh), 0x10) != 0x8720L)
            {
                box3 = box2;
                box3.Text = box3.Text + "\t<key>@APTicket</key>\r\n";
                box3 = box2;
                box3.Text = box3.Text + "\t<true/>\r\n";
            }
            if (box.Text.Contains("BasebandFirmware"))
            {
                box3 = box2;
                box3.Text = box3.Text + "\t<key>@BBTicket</key>\r\n";
                box3 = box2;
                box3.Text = box3.Text + "\t<true/>\r\n";
            }
            box3 = box2;
            box3.Text = box3.Text + "\t<key>ApBoardID</key>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<integer>" + Conversions.ToString((int)boardIDmeh) + "</integer>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<key>ApChipID</key>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<integer>" + Conversions.ToString(Convert.ToInt64(Conversions.ToString((int)chipIDmeh), 0x10)) + "</integer>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<key>ApECID</key>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<integer>$ECID$</integer>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<key>ApProductionMode</key>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<true/>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<key>ApSecurityDomain</key>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "\t<integer>1</integer>\r\n";
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "AppleLogo");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryCharging");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryCharging0");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryCharging1");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryFull");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryLow0");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryLow1");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "BatteryPlugin");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "DeviceTree");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "KernelCache");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "LLB");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "RecoveryMode");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "RestoreDeviceTree");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "RestoreKernelCache");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "RestoreLogo");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "RestoreRamDisk");
            box3 = box2;
            box3.Text = box3.Text + str;
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "iBEC");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "iBSS");
            box3 = box2;
            box3.Text = box3.Text + ChunkDigestStuff(startPos, filePath, "iBoot");
            box3 = box2;
            box3.Text = box3.Text + "</dict>\r\n";
            box3 = box2;
            box3.Text = box3.Text + "</plist>\r\n";
            return box2.Text;
        }

        public static void giveMeDetails(string boardConfigvar, ref int chipIDvar, ref int boardIDvar, ref string deviceNamevar, ref string producttypevar)
        {
            if (boardConfigvar == "m68ap")
            {
                producttypevar = "iPhone1,1";
                deviceNamevar = "iPhone 2G";
                chipIDvar = 0x22c4;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "n82ap")
            {
                producttypevar = "iPhone1,2";
                deviceNamevar = "iPhone 3G";
                chipIDvar = 0x22c4;
                boardIDvar = 4;
            }
            else if (boardConfigvar == "n88ap")
            {
                producttypevar = "iPhone2,1";
                deviceNamevar = "iPhone 3GS";
                chipIDvar = 0x22d8;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "n90ap")
            {
                producttypevar = "iPhone3,1";
                deviceNamevar = "iPhone 4 [GSM]";
                chipIDvar = 0x22e2;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "n90bap")
            {
                producttypevar = "iPhone3,2";
                deviceNamevar = "iPhone 4 [GSM]";
                chipIDvar = 0x22e2;
                boardIDvar = 4;
            }
            else if (boardConfigvar == "n92ap")
            {
                producttypevar = "iPhone3,3";
                deviceNamevar = "iPhone 4 [CDMA]";
                chipIDvar = 0x22e2;
                boardIDvar = 6;
            }
            else if (boardConfigvar == "n94ap")
            {
                producttypevar = "iPhone4,1";
                deviceNamevar = "iPhone 4S";
                chipIDvar = 0x22ec;
                boardIDvar = 8;
            }
            else if (boardConfigvar == "n41ap")
            {
                producttypevar = "iPhone5,1";
                deviceNamevar = "iPhone 5 [A1428]";
                chipIDvar = 0x22f6;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "n42ap")
            {
                producttypevar = "iPhone5,2";
                deviceNamevar = "iPhone 5 [A1429]";
                chipIDvar = 0x22f6;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "n45ap")
            {
                producttypevar = "iPod1,1";
                deviceNamevar = "iPod Touch 1G";
                chipIDvar = 0x22c4;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "n72ap")
            {
                producttypevar = "iPod2,1";
                deviceNamevar = "iPod Touch 2G";
                chipIDvar = 0x2210;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "n18ap")
            {
                producttypevar = "iPod3,1";
                deviceNamevar = "iPod Touch 3";
                chipIDvar = 0x22da;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "n81ap")
            {
                producttypevar = "iPod4,1";
                deviceNamevar = "iPod Touch 4";
                chipIDvar = 0x22e2;
                boardIDvar = 8;
            }
            else if (boardConfigvar == "n78ap")
            {
                producttypevar = "iPod5,1";
                deviceNamevar = "iPod Touch 5";
                chipIDvar = 0x22ee;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "k66ap")
            {
                producttypevar = "AppleTV2,1";
                deviceNamevar = "Apple TV 2";
                chipIDvar = 0x22e2;
                boardIDvar = 0x10;
            }
            else if (boardConfigvar == "j33ap")
            {
                producttypevar = "AppleTV3,1";
                deviceNamevar = "Apple TV 3";
                chipIDvar = 0x22ee;
                boardIDvar = 0x10;
            }
            else if (boardConfigvar == "j33iap")
            {
                producttypevar = "AppleTV3,2";
                deviceNamevar = "Apple TV 3 (2013)";
                chipIDvar = 0x22f3;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "k48ap")
            {
                producttypevar = "iPad1,1";
                deviceNamevar = "iPad 1";
                chipIDvar = 0x22e2;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "k93ap")
            {
                producttypevar = "iPad2,1";
                deviceNamevar = "iPad 2 [WiFi]";
                chipIDvar = 0x22ec;
                boardIDvar = 4;
            }
            else if (boardConfigvar == "k93aap")
            {
                producttypevar = "iPad2,4";
                deviceNamevar = "iPad 2 [WiFi] (Rev. 2)";
                chipIDvar = 0x22ee;
                boardIDvar = 6;
            }
            else if (boardConfigvar == "k94ap")
            {
                producttypevar = "iPad2,2";
                deviceNamevar = "iPad 2 [GSM]";
                chipIDvar = 0x22ec;
                boardIDvar = 6;
            }
            else if (boardConfigvar == "k95ap")
            {
                producttypevar = "iPad2,3";
                deviceNamevar = "iPad 2 [CDMA]";
                chipIDvar = 0x22ec;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "j1ap")
            {
                producttypevar = "iPad3,1";
                deviceNamevar = "iPad 3 [WiFi]";
                chipIDvar = 0x22f1;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "j2ap")
            {
                producttypevar = "iPad3,2";
                deviceNamevar = "iPad 3 [CDMA]";
                chipIDvar = 0x22f1;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "j2aap")
            {
                producttypevar = "iPad3,3";
                deviceNamevar = "iPad 3 [GSM]";
                chipIDvar = 0x22f1;
                boardIDvar = 4;
            }
            else if (boardConfigvar == "p101ap")
            {
                producttypevar = "iPad3,4";
                deviceNamevar = "iPad 4 [WiFi]";
                chipIDvar = 0x22fb;
                boardIDvar = 0;
            }
            else if (boardConfigvar == "p102ap")
            {
                producttypevar = "iPad3,5";
                deviceNamevar = "iPad 4 [A1459]";
                chipIDvar = 0x22fb;
                boardIDvar = 2;
            }
            else if (boardConfigvar == "p103ap")
            {
                producttypevar = "iPad3,6";
                deviceNamevar = "iPad 4 [A1460]";
                chipIDvar = 0x22fb;
                boardIDvar = 4;
            }
            else if (boardConfigvar == "p105ap")
            {
                producttypevar = "iPad2,5";
                deviceNamevar = "iPad mini [WiFi]";
                chipIDvar = 0x22ee;
                boardIDvar = 10;
            }
            else if (boardConfigvar == "p106ap")
            {
                producttypevar = "iPad2,6";
                deviceNamevar = "iPad mini [A1454]";
                chipIDvar = 0x22ee;
                boardIDvar = 12;
            }
            else if (boardConfigvar == "p107ap")
            {
                producttypevar = "iPad2,7";
                deviceNamevar = "iPad mini [A1455]";
                chipIDvar = 0x22ee;
                boardIDvar = 14;
            }
            else
            {
                producttypevar = "Unknown";
                deviceNamevar = "Unknown";
                chipIDvar = 0;
                boardIDvar = 0;
            }
        }

        public static bool ManifestResourceExist(string resourceName)
        {
            Assembly executingAssembly = Assembly.GetExecutingAssembly();
            ManifestResourceInfo manifestResourceInfo = executingAssembly.GetManifestResourceInfo(resourceName);
            foreach (string str in executingAssembly.GetManifestResourceNames())
            {
                if (str.ToLower().IndexOf(resourceName.ToLower()) != -1)
                {
                    return true;
                }
            }
            return false;
        }

        public static string MD5CalcString(string strData)
        {
            MD5CryptoServiceProvider provider = new MD5CryptoServiceProvider();
            byte[] bytes = Encoding.UTF8.GetBytes(strData);
            byte[] arrInput = provider.ComputeHash(bytes);
            provider = null;
            return ByteArrayToString(arrInput);
        }

        public static void Merge_File(string FirstFile, string SecondFile, string FinalFile)
        {
            modProcessCmd.cmdline = "cmd /c type " + Quotation + FirstFile + Quotation + " " + Quotation + SecondFile + Quotation + " >> " + Quotation + FinalFile + Quotation;
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }

        public static void RawPatch(string FilePath, string Offset, string BytesToWrite)
        {
            Offset = Offset.Replace("0x", "");
            BytesToWrite = BytesToWrite.Replace(" ", "");
            BinaryWriter writer = new BinaryWriter(System.IO.File.Open(FilePath, FileMode.Open, FileAccess.ReadWrite));
            writer.Seek(int.Parse(Offset, NumberStyles.HexNumber), SeekOrigin.Begin);
            writer.Write(String_To_Bytes(BytesToWrite));
            writer.Close();
        }

        public static byte[] ReadToEnd(Stream stream)
        {
            byte[] buffer4;
            long position = stream.Position;
            stream.Position = 0L;
            try
            {
                int num3 = 0;
                byte[] buffer = new byte[0x1000];
                int offset = 0;
                while (InlineAssignHelper<int>(ref num3, stream.Read(buffer, offset, buffer.Length - offset)) > 0)
                {
                    offset += num3;
                    if (offset == buffer.Length)
                    {
                        int num4 = stream.ReadByte();
                        if (num4 != -1)
                        {
                            byte[] buffer2 = new byte[((buffer.Length * 2) - 1) + 1];
                            Buffer.BlockCopy(buffer, 0, buffer2, 0, buffer.Length);
                            Buffer.SetByte(buffer2, offset, (byte)num4);
                            buffer = buffer2;
                            offset++;
                        }
                    }
                }
                byte[] dst = buffer;
                if (buffer.Length != offset)
                {
                    dst = new byte[(offset - 1) + 1];
                    Buffer.BlockCopy(buffer, 0, dst, 0, offset);
                }
                buffer4 = dst;
            }
            finally
            {
                stream.Position = position;
            }
            return buffer4;
        }

        public static string ChunkDigestStuff(int startPos, string BuildManifest, string ImageType)
        {
            string str = string.Empty;
            RichTextBox box = new RichTextBox();
            Definitions.i = startPos;
            using (FileStream stream = System.IO.File.Open(BuildManifest, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    string target = string.Empty;
                    string str3 = string.Empty;
                    int num = 0;
                    string str4 = string.Empty;
                    while (InlineAssignHelper<string>(ref target, reader.ReadLine()) != null)
                    {
                        if (target.Contains("<key>" + ImageType + "</key>") && InlineAssignHelper<string>(ref str3, reader.ReadLine()).Contains("<dict>"))
                        {
                            num = str3.Split(new char[] { '\t' }).Length - 1;
                            str = str + "\t" + target.Replace("\t", "") + "\r\n";
                            str = str + "\t" + str3.Replace("\t", "") + "\r\n";
                            box.Text = str;
                            Definitions.i = 0;
                            while (Definitions.i != num)
                            {
                                str4 = str4 + "\t";
                                Definitions.i++;
                                Application.DoEvents();
                            }
                            str4 = str4 + "</dict>";
                            while (target != str4)
                            {
                                target = reader.ReadLine();
                                RichTextBox box2 = box;
                                box2.Text = box2.Text + target.Replace("\t", "").Replace("\r", "") + "\r\n";
                            }
                            goto Label_01B1;
                        }
                    }
                }
            }
        Label_01B1:
            if (box.Text.Contains("<key>BuildString</key>"))
            {
                Definitions.i = 0;
                while (!box.Lines[Definitions.i].Contains("<key>BuildString</key>"))
                {
                    Definitions.i++;
                    Application.DoEvents();
                }
                str = (str + "\t\t" + box.Lines[Definitions.i].Replace("\t", "") + "\r\n") + "\t\t" + box.Lines[Definitions.i + 1].Replace("\t", "") + "\r\n";
            }
            if (box.Text.Contains("<key>Digest</key>"))
            {
                Definitions.i = 0;
                while (!box.Lines[Definitions.i].Contains("<key>Digest</key>"))
                {
                    Definitions.i++;
                    Application.DoEvents();
                }
                while (!box.Lines[Definitions.i - 1].Contains("</data>"))
                {
                    str = str + "\t\t" + box.Lines[Definitions.i].Replace("\t", "") + "\r\n";
                    Definitions.i++;
                    Application.DoEvents();
                }
            }
            if (box.Text.Contains("<key>PartialDigest</key>"))
            {
                Definitions.i = 0;
                while (!box.Lines[Definitions.i].Contains("<key>PartialDigest</key>"))
                {
                    Definitions.i++;
                    Application.DoEvents();
                }
                while (!box.Lines[Definitions.i - 1].Contains("</data>"))
                {
                    str = str + "\t\t" + box.Lines[Definitions.i].Replace("\t", "") + "\r\n";
                    Definitions.i++;
                    Application.DoEvents();
                }
            }
            if (box.Text.Contains("<key>Trusted</key>"))
            {
                str = str + "\t\t<key>Trusted</key>\r\n" + "\t\t<true/>\r\n";
            }
            str = str + "\t</dict>\r\n";
            box.Dispose();
            return str;
        }

        public static byte[] String_To_Bytes(string strInput)
        {
            int startIndex = 0;
            int index = 0;
            byte[] buffer = new byte[((strInput.Length / 2) - 1) + 1];
            while (strInput.Length > (startIndex + 1))
            {
                long num3 = Convert.ToInt32(strInput.Substring(startIndex, 2), 0x10);
                buffer[index] = Convert.ToByte(num3);
                startIndex += 2;
                index++;
            }
            return buffer;
        }

        public static T InlineAssignHelper<T>(ref T target, T value)
        {
            target = value;
            return value;
        }

        public class clsTopMostMessageBox
        {
            public static DialogResult Show(string title, string message, MessageBoxButtons buttons, MessageBoxIcon icons)
            {
                Form owner = new Form();
                Size size = new Size(1, 1);
                owner.Size = size;
                owner.ShowInTaskbar = false;
                owner.StartPosition = FormStartPosition.Manual;
                Rectangle virtualScreen = SystemInformation.VirtualScreen;
                Point point = new Point(virtualScreen.Bottom + 10, virtualScreen.Right + 10);
                owner.Location = point;
                owner.Show();
                owner.Focus();
                owner.BringToFront();
                owner.TopMost = true;
                DialogResult result = MessageBox.Show(owner, message, title, buttons, icons);
                owner.Dispose();
                return result;
            }
        }

        public class WebFileDownloader
        {
            private string mCurrentFile = string.Empty;

            public event AmountDownloadedChangedEventHandler AmountDownloadedChanged;

            public event FileDownloadCompleteEventHandler FileDownloadComplete;

            public event FileDownloadFailedEventHandler FileDownloadFailed;

            public event FileDownloadSizeObtainedEventHandler FileDownloadSizeObtained;

            public bool DownloadFile(string URL, string Location)
            {
                bool flag = false;
                try
                {
                    this.mCurrentFile = this.GetFileName(URL);
                    new WebClient().DownloadFile(URL, Location);
                    FileDownloadCompleteEventHandler fileDownloadCompleteEvent = this.FileDownloadComplete;
                    if (fileDownloadCompleteEvent != null)
                    {
                        fileDownloadCompleteEvent();
                    }
                    flag = true;
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception ex = exception1;
                    FileDownloadFailedEventHandler fileDownloadFailedEvent = this.FileDownloadFailed;
                    if (fileDownloadFailedEvent != null)
                    {
                        fileDownloadFailedEvent(ex);
                    }
                    flag = false;
                    ProjectData.ClearProjectError();
                }
                return flag;
            }

            public bool DownloadFileWithProgress(string URL, string Location)
            {
                FileStream stream = null;
                bool flag = false;
                try
                {
                    int num = 0;
                    this.mCurrentFile = this.GetFileName(URL);
                    byte[] buffer = new byte[0x101];
                    stream = new FileStream(Location, FileMode.Create, FileAccess.Write);
                    WebResponse response = WebRequest.Create(URL).GetResponse();
                    FileDownloadSizeObtainedEventHandler fileDownloadSizeObtainedEvent = this.FileDownloadSizeObtained;
                    if (fileDownloadSizeObtainedEvent != null)
                    {
                        fileDownloadSizeObtainedEvent(response.ContentLength);
                    }
                    Stream responseStream = response.GetResponseStream();
                    do
                    {
                        int num2 = 0;
                        AmountDownloadedChangedEventHandler amountDownloadedChangedEvent;
                        if (iFaith.CancelDownload)
                        {
                            iFaith.CancelDownload = false;
                            responseStream.Close();
                            stream.Close();
                            return flag;
                        }
                        num = responseStream.Read(buffer, 0, 0x100);
                        stream.Write(buffer, 0, num);
                        num2 += num;
                        if (response.ContentLength < num2)
                        {
                            amountDownloadedChangedEvent = this.AmountDownloadedChanged;
                            if (amountDownloadedChangedEvent != null)
                            {
                                amountDownloadedChangedEvent(response.ContentLength);
                            }
                        }
                        else
                        {
                            amountDownloadedChangedEvent = this.AmountDownloadedChanged;
                            if (amountDownloadedChangedEvent != null)
                            {
                                amountDownloadedChangedEvent((long)num2);
                            }
                        }
                    }
                    while (num != 0);
                    FormMain objFormMain = new FormMain();
                    objFormMain.setProgresstxt("Writing file to Hard Drive...");
                    Application.DoEvents();
                    responseStream.Close();
                    stream.Close();
                    FileDownloadCompleteEventHandler fileDownloadCompleteEvent = this.FileDownloadComplete;
                    if (fileDownloadCompleteEvent != null)
                    {
                        fileDownloadCompleteEvent();
                    }
                    flag = true;
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception ex = exception1;
                    if (stream != null)
                    {
                        stream.Close();
                        stream = null;
                    }
                    FileDownloadFailedEventHandler fileDownloadFailedEvent = this.FileDownloadFailed;
                    if (fileDownloadFailedEvent != null)
                    {
                        fileDownloadFailedEvent(ex);
                    }
                    flag = false;
                    ProjectData.ClearProjectError();
                }
                return flag;
            }

            public string FormatFileSize(long Size)
            {
                try
                {
                    double num4;
                    int num = 0x400;
                    int num2 = num * num;
                    if (Size < num)
                    {
                        return (Size.ToString("D") + " bytes");
                    }
                    double num3 = ((double)Size) / ((double)num);
                    if (num3 < 1000.0)
                    {
                        num4 = ((double)Size) / ((double)num);
                        return (num4.ToString("N") + "KB");
                    }
                    if (num3 < 1000000.0)
                    {
                        num4 = ((double)Size) / ((double)num2);
                        return (num4.ToString("N") + "MB");
                    }
                    if (num3 < 10000000.0)
                    {
                        num4 = (((double)Size) / ((double)num2)) / ((double)num);
                        return (num4.ToString("N") + "GB");
                    }
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception exception = exception1;
                    string str = Size.ToString();
                    ProjectData.ClearProjectError();
                    return str;
                }
                return Size.ToString();
            }

            private string GetFileName(string URL)
            {
                string str;
                try
                {
                    str = URL.Substring(URL.LastIndexOf("/") + 1);
                }
                catch (Exception exception1)
                {
                    ProjectData.SetProjectError(exception1);
                    Exception exception = exception1;
                    str = URL;
                    ProjectData.ClearProjectError();
                }
                return str;
            }

            public string CurrentFile
            {
                get
                {
                    return this.mCurrentFile;
                }
            }

            
        }
        public static void Downloader()
        {
            string zipURL = "http://appldnld.apple.com/iPhone4/061-9855.20101122.Lrft6/iPod2,1_4.2.1_8C148_Restore.ipsw";
            string str2 = "http://appldnld.apple.com/iOS5.1.1/041-4300.20120427.WvgGq/iPod3,1_5.1.1_9B206_Restore.ipsw";
            string str3 = "http://appldnld.apple.com/iOS6.1/091-2655.20130319.Wyt54/iPod4,1_6.1.3_10B329_Restore.ipsw";
            string str4 = "http://appldnld.apple.com/iOS6.1/091-2371.20130319.715gt/iPhone2,1_6.1.3_10B329_Restore.ipsw";
            string str5 = "http://appldnld.apple.com/iOS7.1/031-4639.20140310.Pvdbt/iPhone3,1_7.1_11D169_Restore.ipsw";
            string str6 = "http://appldnld.apple.com/iOS6.1/091-2444.20130319.exFqm/iPhone3,2_6.1.3_10B329_Restore.ipsw";
            string str7 = "http://appldnld.apple.com/iOS6.1/091-2351.20130319.Fe431/iPhone3,3_6.1.3_10B329_Restore.ipsw";
            string str8 = "http://appldnld.apple.com/iOS5.1.1/041-4292.02120427.Tkk0d/iPad1,1_5.1.1_9B206_Restore.ipsw";
            string str9 = "http://appldnld.apple.com/AppleTV/091-5256.20130618.MagBg/AppleTV2,1_5.3_10B809_Restore.ipsw";
            if (modProcessCmd.board == "n88ap")
            {
                DownloadFromURL(str4, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str4, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "n90bap")
            {
                DownloadFromURL(str6, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str6, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "n92ap")
            {
                DownloadFromURL(str7, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str7, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "n90ap")
            {
                DownloadFromURL(str5, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str5, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "n72ap")
            {
                DownloadFromURL(zipURL, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(zipURL, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "n18ap")
            {
                DownloadFromURL(str2, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str2, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "n81ap")
            {
                DownloadFromURL(str3, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str3, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "k66ap")
            {
                DownloadFromURL(str9, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str9, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            else if (modProcessCmd.board == "k48ap")
            {
                DownloadFromURL(str8, "Firmware/dfu/iBSS." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu");
                DownloadFromURL(str8, "Firmware/dfu/iBEC." + modProcessCmd.board + ".RELEASE.dfu", temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu");
            }
            if (!modFile.File_Exists(temppath + @"\iBSS." + modProcessCmd.board + ".RELEASE.dfu") | !modFile.File_Exists(temppath + @"\iBEC." + modProcessCmd.board + ".RELEASE.dfu"))
            {
                Interaction.MsgBox("Error (Download Failure)", MsgBoxStyle.Critical, null);
                Run run = new Run();
                run.Restore_Window();
            }
        }

        //METODO IMPORTADO DEL iREB7 (ADAPTADO)
        /*public static void DownloadFromURL(string ZipURL, string FilePathFromZip, string LocalPath)
        {
            RemoteZipFile file = new RemoteZipFile();
            if (!file.Load(ZipURL))
            {
                Interaction.MsgBox("File was not found!", MsgBoxStyle.Critical, null);
            }
            else
            {
                IEnumerator enumerator = null;
                try
                {
                    enumerator = file.GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                        ICSharpCode.SharpZipLib.Zip.ZipEntry current = (ICSharpCode.SharpZipLib.Zip.ZipEntry)enumerator.Current;
                        if (current.Name == FilePathFromZip)
                        {
                            FileStream output = new FileStream(LocalPath, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                            CopyStream(file.GetInputStream(current), output);
                            output.Close();
                        }
                    }
                }
                finally
                {
                    if (enumerator is IDisposable)
                    {
                        (enumerator as IDisposable).Dispose();
                    }
                }
            }
        }*/

        public static void DownloadFromURL(string ZipURL, string FilePathFromZip, string LocalPath)
        {
            RemoteZipFile file = new RemoteZipFile();
            if (!file.Load(ZipURL))
            {
                Interaction.MsgBox("File was not found!", MsgBoxStyle.Critical, null);
            }
            else
            {
                IEnumerator enumerator = null;
                try
                {
                    enumerator = file.GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                        ICSharpCode.SharpZipLib.Zip.ZipEntry current = (ICSharpCode.SharpZipLib.Zip.ZipEntry)enumerator.Current;
                        Application.DoEvents();
                        if (current.Name == FilePathFromZip)
                        {
                            if (FilePathFromZip.Contains("iBEC"))
                            {
                                MemoryStream output = new MemoryStream();
                                CopyStream(file.GetInputStream(current), output);
                                AddiBECToPayload(output, LocalPath);
                            }
                            else
                            {
                                FileStream stream2 = new FileStream(LocalPath, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                CopyStream(file.GetInputStream(current), stream2);
                                stream2.Close();
                            }
                        }
                    }
                }
                finally
                {
                    if (enumerator is IDisposable)
                    {
                        (enumerator as IDisposable).Dispose();
                    }
                }
            }
        }

        public static void CopyStream(Stream input, Stream output)
        {
            int num = 0;
            byte[] buffer = new byte[4096];
            while (InlineAssignHelper<int>(ref num, input.Read(buffer, 0, buffer.Length)) > 0)
            {
                Application.DoEvents();
                output.Write(buffer, 0, num);
            }
        }

        public static void AddiBECToPayload(MemoryStream ibecStream, string savePath)
        {
            byte[] a = ReturnBytesFromResource("payload.bin");
            byte[] b = ReadToEnd(ibecStream);
            System.IO.File.WriteAllBytes(savePath, Combine(a, b));
        }

        public static byte[] ReturnBytesFromResource(string resourceName)
        {
            Assembly executingAssembly = Assembly.GetExecutingAssembly();
            foreach (string str in executingAssembly.GetManifestResourceNames())
            {
                if (str.ToLower().IndexOf(resourceName.ToLower()) != -1)
                {
                    using (Stream stream = executingAssembly.GetManifestResourceStream(str))
                    {
                        return ReadToEnd(stream);
                    }
                }
            }
            return null;
        }

        public static byte[] Combine(byte[] a, byte[] b)
        {
            byte[] dst = new byte[(a.Length + (b.Length - 1)) + 1];
            Buffer.BlockCopy(a, 0, dst, 0, a.Length);
            Buffer.BlockCopy(b, 0, dst, a.Length, b.Length);
            return dst;
        }

        public static string SendPOSTRequest(string URL, byte[] DataToPost, string UserAgent)
        {
            sendPOSTURL = URL;
            sendPOSTData = DataToPost;
            sendPOSTUserAgent = UserAgent;
            webResponse = string.Empty;
            ThreadPool.QueueUserWorkItem(new WaitCallback(iFaith.SendCallBack));
            while (webResponse == string.Empty)
            {
                Application.DoEvents();
            }
            return webResponse;
        }

        public static void SendActualPOSTRequest()
        {
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(sendPOSTURL);
                MemoryStream stream = new MemoryStream(sendPOSTData);
                request.Method = "POST";
                request.UserAgent = sendPOSTUserAgent;
                request.ContentType = "text/xml; charset=utf8";
                request.ContentLength = stream.Length;
                request.AllowWriteStreamBuffering = true;
                Stream requestStream = request.GetRequestStream();
                byte[] buffer = new byte[((int)(stream.Length - 1L)) + 1];
                int num = stream.Read(buffer, 0, (int)stream.Length);
                requestStream.Write(buffer, 0, (int)stream.Length);
                stream.Close();
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                requestStream.Close();
                StreamReader reader = new StreamReader(response.GetResponseStream());
                while (reader.Peek() >= 0)
                {
                    webResponse = reader.ReadToEnd();
                }
                if (webResponse == string.Empty)
                {
                    webResponse = "done";
                }
            }
            catch (Exception exception1)
            {
                ProjectData.SetProjectError(exception1);
                Exception exception = exception1;
                MDIMain objMain = new MDIMain();

                if (Operators.ConditionalCompareObjectEqual(objMain.ThisBuildIsNotPublic, true, false))
                {
                    Interaction.MsgBox("POST FAILED:\r\rURL: " + sendPOSTURL + "\r\rError:" + exception.ToString(), MsgBoxStyle.Critical, null);
                }
                webResponse = "failed";
                ProjectData.ClearProjectError();
            }
        }

        public static void xml_to_bplist(string xml, string bplist)
        {
            Dictionary<string, object> dictionary = (Dictionary<string, object>)Plist.readPlist(xml);
            Plist.writeBinary(dictionary, bplist);
            dictionary.Clear();
        }

        public static void Delete_File(string FilePath)
        {
            modProcessCmd.cmdline = "cmd /c DEL " + Quotation + FilePath + Quotation;
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }

        public static void Wait_For_iBoot()
        {
            modProcessCmd.cmdline = iRecovery + "-iboot";
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
            modProcessCmd.Delay(2.0);
            modProcessCmd.ExecCmd(modProcessCmd.cmdline, true);
        }
       

        public delegate void AmountDownloadedChangedEventHandler(long iNewProgress);

        public delegate void FileDownloadCompleteEventHandler();

        public delegate void FileDownloadFailedEventHandler(Exception ex);

        public delegate void FileDownloadSizeObtainedEventHandler(long iFileSize);
    }
}
